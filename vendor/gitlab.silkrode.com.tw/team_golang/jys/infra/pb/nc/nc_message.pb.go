// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/nc/nc_message.proto

package nc

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	commonpb "gitlab.silkrode.com.tw/golang/gopher/pb/v2/commonpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreateNotificationReq struct {
	Title       string           `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content     string           `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Type        NotificationType `protobuf:"varint,3,opt,name=type,proto3,enum=nc.NotificationType" json:"type,omitempty"`
	PublishedAt *time.Time       `protobuf:"bytes,4,opt,name=published_at,json=publishedAt,proto3,stdtime" json:"published_at,omitempty"`
	Users       []*User          `protobuf:"bytes,5,rep,name=users,proto3" json:"users,omitempty"`
}

func (m *CreateNotificationReq) Reset()         { *m = CreateNotificationReq{} }
func (m *CreateNotificationReq) String() string { return proto.CompactTextString(m) }
func (*CreateNotificationReq) ProtoMessage()    {}
func (*CreateNotificationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ded58a16719d600, []int{0}
}
func (m *CreateNotificationReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateNotificationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateNotificationReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateNotificationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNotificationReq.Merge(m, src)
}
func (m *CreateNotificationReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateNotificationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNotificationReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNotificationReq proto.InternalMessageInfo

func (m *CreateNotificationReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CreateNotificationReq) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CreateNotificationReq) GetType() NotificationType {
	if m != nil {
		return m.Type
	}
	return NotificationType_Unknown
}

func (m *CreateNotificationReq) GetPublishedAt() *time.Time {
	if m != nil {
		return m.PublishedAt
	}
	return nil
}

func (m *CreateNotificationReq) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type CreateNotificationResp struct {
	Notification *Notification `protobuf:"bytes,1,opt,name=notification,proto3" json:"notification,omitempty"`
	PublishTotal int64         `protobuf:"varint,2,opt,name=publishTotal,proto3" json:"publishTotal,omitempty"`
}

func (m *CreateNotificationResp) Reset()         { *m = CreateNotificationResp{} }
func (m *CreateNotificationResp) String() string { return proto.CompactTextString(m) }
func (*CreateNotificationResp) ProtoMessage()    {}
func (*CreateNotificationResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ded58a16719d600, []int{1}
}
func (m *CreateNotificationResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateNotificationResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateNotificationResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateNotificationResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNotificationResp.Merge(m, src)
}
func (m *CreateNotificationResp) XXX_Size() int {
	return m.Size()
}
func (m *CreateNotificationResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNotificationResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNotificationResp proto.InternalMessageInfo

func (m *CreateNotificationResp) GetNotification() *Notification {
	if m != nil {
		return m.Notification
	}
	return nil
}

func (m *CreateNotificationResp) GetPublishTotal() int64 {
	if m != nil {
		return m.PublishTotal
	}
	return 0
}

type PushNotification struct {
	NotificationID int64            `protobuf:"varint,1,opt,name=NotificationID,proto3" json:"NotificationID,omitempty"`
	Title          string           `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content        string           `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Type           NotificationType `protobuf:"varint,4,opt,name=type,proto3,enum=nc.NotificationType" json:"type,omitempty"`
	PublishedAt    *time.Time       `protobuf:"bytes,5,opt,name=published_at,json=publishedAt,proto3,stdtime" json:"published_at,omitempty"`
	Users          []*User          `protobuf:"bytes,6,rep,name=users,proto3" json:"users,omitempty"`
}

func (m *PushNotification) Reset()         { *m = PushNotification{} }
func (m *PushNotification) String() string { return proto.CompactTextString(m) }
func (*PushNotification) ProtoMessage()    {}
func (*PushNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ded58a16719d600, []int{2}
}
func (m *PushNotification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushNotification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushNotification.Merge(m, src)
}
func (m *PushNotification) XXX_Size() int {
	return m.Size()
}
func (m *PushNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_PushNotification.DiscardUnknown(m)
}

var xxx_messageInfo_PushNotification proto.InternalMessageInfo

func (m *PushNotification) GetNotificationID() int64 {
	if m != nil {
		return m.NotificationID
	}
	return 0
}

func (m *PushNotification) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PushNotification) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *PushNotification) GetType() NotificationType {
	if m != nil {
		return m.Type
	}
	return NotificationType_Unknown
}

func (m *PushNotification) GetPublishedAt() *time.Time {
	if m != nil {
		return m.PublishedAt
	}
	return nil
}

func (m *PushNotification) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type ListNotificationReq struct {
	WhereCond WhereNotificationCondition `protobuf:"bytes,1,opt,name=where_cond,json=whereCond,proto3" json:"where_cond"`
}

func (m *ListNotificationReq) Reset()         { *m = ListNotificationReq{} }
func (m *ListNotificationReq) String() string { return proto.CompactTextString(m) }
func (*ListNotificationReq) ProtoMessage()    {}
func (*ListNotificationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ded58a16719d600, []int{3}
}
func (m *ListNotificationReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListNotificationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListNotificationReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListNotificationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNotificationReq.Merge(m, src)
}
func (m *ListNotificationReq) XXX_Size() int {
	return m.Size()
}
func (m *ListNotificationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNotificationReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListNotificationReq proto.InternalMessageInfo

func (m *ListNotificationReq) GetWhereCond() WhereNotificationCondition {
	if m != nil {
		return m.WhereCond
	}
	return WhereNotificationCondition{}
}

type ListNotificationResp struct {
	Notifications []*Notification `protobuf:"bytes,1,rep,name=notifications,proto3" json:"notifications,omitempty"`
	Total         int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *ListNotificationResp) Reset()         { *m = ListNotificationResp{} }
func (m *ListNotificationResp) String() string { return proto.CompactTextString(m) }
func (*ListNotificationResp) ProtoMessage()    {}
func (*ListNotificationResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ded58a16719d600, []int{4}
}
func (m *ListNotificationResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListNotificationResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListNotificationResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListNotificationResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNotificationResp.Merge(m, src)
}
func (m *ListNotificationResp) XXX_Size() int {
	return m.Size()
}
func (m *ListNotificationResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNotificationResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListNotificationResp proto.InternalMessageInfo

func (m *ListNotificationResp) GetNotifications() []*Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

func (m *ListNotificationResp) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type UpdateNotificationReq struct {
	WhereCond    WhereNotificationCondition `protobuf:"bytes,1,opt,name=where_cond,json=whereCond,proto3" json:"where_cond"`
	Notification *Notification              `protobuf:"bytes,2,opt,name=notification,proto3" json:"notification,omitempty"`
}

func (m *UpdateNotificationReq) Reset()         { *m = UpdateNotificationReq{} }
func (m *UpdateNotificationReq) String() string { return proto.CompactTextString(m) }
func (*UpdateNotificationReq) ProtoMessage()    {}
func (*UpdateNotificationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ded58a16719d600, []int{5}
}
func (m *UpdateNotificationReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateNotificationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateNotificationReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateNotificationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNotificationReq.Merge(m, src)
}
func (m *UpdateNotificationReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateNotificationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNotificationReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNotificationReq proto.InternalMessageInfo

func (m *UpdateNotificationReq) GetWhereCond() WhereNotificationCondition {
	if m != nil {
		return m.WhereCond
	}
	return WhereNotificationCondition{}
}

func (m *UpdateNotificationReq) GetNotification() *Notification {
	if m != nil {
		return m.Notification
	}
	return nil
}

type DeleteNotificationReq struct {
	WhereCond WhereNotificationCondition `protobuf:"bytes,1,opt,name=where_cond,json=whereCond,proto3" json:"where_cond"`
}

func (m *DeleteNotificationReq) Reset()         { *m = DeleteNotificationReq{} }
func (m *DeleteNotificationReq) String() string { return proto.CompactTextString(m) }
func (*DeleteNotificationReq) ProtoMessage()    {}
func (*DeleteNotificationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ded58a16719d600, []int{6}
}
func (m *DeleteNotificationReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteNotificationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteNotificationReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteNotificationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteNotificationReq.Merge(m, src)
}
func (m *DeleteNotificationReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteNotificationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteNotificationReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteNotificationReq proto.InternalMessageInfo

func (m *DeleteNotificationReq) GetWhereCond() WhereNotificationCondition {
	if m != nil {
		return m.WhereCond
	}
	return WhereNotificationCondition{}
}

type RecordReadUserNotificationReq struct {
	UserID              int64   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserNotificationIDs []int64 `protobuf:"varint,2,rep,packed,name=user_notification_ids,json=userNotificationIds,proto3" json:"user_notification_ids,omitempty"`
}

func (m *RecordReadUserNotificationReq) Reset()         { *m = RecordReadUserNotificationReq{} }
func (m *RecordReadUserNotificationReq) String() string { return proto.CompactTextString(m) }
func (*RecordReadUserNotificationReq) ProtoMessage()    {}
func (*RecordReadUserNotificationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ded58a16719d600, []int{7}
}
func (m *RecordReadUserNotificationReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordReadUserNotificationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordReadUserNotificationReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordReadUserNotificationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordReadUserNotificationReq.Merge(m, src)
}
func (m *RecordReadUserNotificationReq) XXX_Size() int {
	return m.Size()
}
func (m *RecordReadUserNotificationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordReadUserNotificationReq.DiscardUnknown(m)
}

var xxx_messageInfo_RecordReadUserNotificationReq proto.InternalMessageInfo

func (m *RecordReadUserNotificationReq) GetUserID() int64 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *RecordReadUserNotificationReq) GetUserNotificationIDs() []int64 {
	if m != nil {
		return m.UserNotificationIDs
	}
	return nil
}

type ListUserNotificationReq struct {
	WhereCond WhereUserNotificationCondition `protobuf:"bytes,1,opt,name=where_cond,json=whereCond,proto3" json:"where_cond"`
}

func (m *ListUserNotificationReq) Reset()         { *m = ListUserNotificationReq{} }
func (m *ListUserNotificationReq) String() string { return proto.CompactTextString(m) }
func (*ListUserNotificationReq) ProtoMessage()    {}
func (*ListUserNotificationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ded58a16719d600, []int{8}
}
func (m *ListUserNotificationReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListUserNotificationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListUserNotificationReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListUserNotificationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUserNotificationReq.Merge(m, src)
}
func (m *ListUserNotificationReq) XXX_Size() int {
	return m.Size()
}
func (m *ListUserNotificationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUserNotificationReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListUserNotificationReq proto.InternalMessageInfo

func (m *ListUserNotificationReq) GetWhereCond() WhereUserNotificationCondition {
	if m != nil {
		return m.WhereCond
	}
	return WhereUserNotificationCondition{}
}

type ListUserNotificationResp struct {
	UserNotifications []*UserNotification `protobuf:"bytes,1,rep,name=user_notifications,json=userNotifications,proto3" json:"user_notifications,omitempty"`
	Total             int64               `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *ListUserNotificationResp) Reset()         { *m = ListUserNotificationResp{} }
func (m *ListUserNotificationResp) String() string { return proto.CompactTextString(m) }
func (*ListUserNotificationResp) ProtoMessage()    {}
func (*ListUserNotificationResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ded58a16719d600, []int{9}
}
func (m *ListUserNotificationResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListUserNotificationResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListUserNotificationResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListUserNotificationResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUserNotificationResp.Merge(m, src)
}
func (m *ListUserNotificationResp) XXX_Size() int {
	return m.Size()
}
func (m *ListUserNotificationResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUserNotificationResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListUserNotificationResp proto.InternalMessageInfo

func (m *ListUserNotificationResp) GetUserNotifications() []*UserNotification {
	if m != nil {
		return m.UserNotifications
	}
	return nil
}

func (m *ListUserNotificationResp) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type WhereNotificationCondition struct {
	Pagination   commonpb.Pagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination"`
	BaseWhere    commonpb.BaseWhere  `protobuf:"bytes,2,opt,name=base_where,json=baseWhere,proto3" json:"base_where"`
	Sorting      commonpb.Sorting    `protobuf:"bytes,3,opt,name=sorting,proto3" json:"sorting"`
	Notification Notification        `protobuf:"bytes,4,opt,name=notification,proto3" json:"notification"`
}

func (m *WhereNotificationCondition) Reset()         { *m = WhereNotificationCondition{} }
func (m *WhereNotificationCondition) String() string { return proto.CompactTextString(m) }
func (*WhereNotificationCondition) ProtoMessage()    {}
func (*WhereNotificationCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ded58a16719d600, []int{10}
}
func (m *WhereNotificationCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhereNotificationCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhereNotificationCondition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhereNotificationCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhereNotificationCondition.Merge(m, src)
}
func (m *WhereNotificationCondition) XXX_Size() int {
	return m.Size()
}
func (m *WhereNotificationCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_WhereNotificationCondition.DiscardUnknown(m)
}

var xxx_messageInfo_WhereNotificationCondition proto.InternalMessageInfo

func (m *WhereNotificationCondition) GetPagination() commonpb.Pagination {
	if m != nil {
		return m.Pagination
	}
	return commonpb.Pagination{}
}

func (m *WhereNotificationCondition) GetBaseWhere() commonpb.BaseWhere {
	if m != nil {
		return m.BaseWhere
	}
	return commonpb.BaseWhere{}
}

func (m *WhereNotificationCondition) GetSorting() commonpb.Sorting {
	if m != nil {
		return m.Sorting
	}
	return commonpb.Sorting{}
}

func (m *WhereNotificationCondition) GetNotification() Notification {
	if m != nil {
		return m.Notification
	}
	return Notification{}
}

type WhereUserNotificationCondition struct {
	Pagination       commonpb.Pagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination"`
	BaseWhere        commonpb.BaseWhere  `protobuf:"bytes,2,opt,name=base_where,json=baseWhere,proto3" json:"base_where"`
	Sorting          commonpb.Sorting    `protobuf:"bytes,3,opt,name=sorting,proto3" json:"sorting"`
	UserNotification UserNotification    `protobuf:"bytes,4,opt,name=user_notification,json=userNotification,proto3" json:"user_notification"`
}

func (m *WhereUserNotificationCondition) Reset()         { *m = WhereUserNotificationCondition{} }
func (m *WhereUserNotificationCondition) String() string { return proto.CompactTextString(m) }
func (*WhereUserNotificationCondition) ProtoMessage()    {}
func (*WhereUserNotificationCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ded58a16719d600, []int{11}
}
func (m *WhereUserNotificationCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhereUserNotificationCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhereUserNotificationCondition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhereUserNotificationCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhereUserNotificationCondition.Merge(m, src)
}
func (m *WhereUserNotificationCondition) XXX_Size() int {
	return m.Size()
}
func (m *WhereUserNotificationCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_WhereUserNotificationCondition.DiscardUnknown(m)
}

var xxx_messageInfo_WhereUserNotificationCondition proto.InternalMessageInfo

func (m *WhereUserNotificationCondition) GetPagination() commonpb.Pagination {
	if m != nil {
		return m.Pagination
	}
	return commonpb.Pagination{}
}

func (m *WhereUserNotificationCondition) GetBaseWhere() commonpb.BaseWhere {
	if m != nil {
		return m.BaseWhere
	}
	return commonpb.BaseWhere{}
}

func (m *WhereUserNotificationCondition) GetSorting() commonpb.Sorting {
	if m != nil {
		return m.Sorting
	}
	return commonpb.Sorting{}
}

func (m *WhereUserNotificationCondition) GetUserNotification() UserNotification {
	if m != nil {
		return m.UserNotification
	}
	return UserNotification{}
}

func init() {
	proto.RegisterType((*CreateNotificationReq)(nil), "nc.CreateNotificationReq")
	golang_proto.RegisterType((*CreateNotificationReq)(nil), "nc.CreateNotificationReq")
	proto.RegisterType((*CreateNotificationResp)(nil), "nc.CreateNotificationResp")
	golang_proto.RegisterType((*CreateNotificationResp)(nil), "nc.CreateNotificationResp")
	proto.RegisterType((*PushNotification)(nil), "nc.PushNotification")
	golang_proto.RegisterType((*PushNotification)(nil), "nc.PushNotification")
	proto.RegisterType((*ListNotificationReq)(nil), "nc.ListNotificationReq")
	golang_proto.RegisterType((*ListNotificationReq)(nil), "nc.ListNotificationReq")
	proto.RegisterType((*ListNotificationResp)(nil), "nc.ListNotificationResp")
	golang_proto.RegisterType((*ListNotificationResp)(nil), "nc.ListNotificationResp")
	proto.RegisterType((*UpdateNotificationReq)(nil), "nc.UpdateNotificationReq")
	golang_proto.RegisterType((*UpdateNotificationReq)(nil), "nc.UpdateNotificationReq")
	proto.RegisterType((*DeleteNotificationReq)(nil), "nc.DeleteNotificationReq")
	golang_proto.RegisterType((*DeleteNotificationReq)(nil), "nc.DeleteNotificationReq")
	proto.RegisterType((*RecordReadUserNotificationReq)(nil), "nc.RecordReadUserNotificationReq")
	golang_proto.RegisterType((*RecordReadUserNotificationReq)(nil), "nc.RecordReadUserNotificationReq")
	proto.RegisterType((*ListUserNotificationReq)(nil), "nc.ListUserNotificationReq")
	golang_proto.RegisterType((*ListUserNotificationReq)(nil), "nc.ListUserNotificationReq")
	proto.RegisterType((*ListUserNotificationResp)(nil), "nc.ListUserNotificationResp")
	golang_proto.RegisterType((*ListUserNotificationResp)(nil), "nc.ListUserNotificationResp")
	proto.RegisterType((*WhereNotificationCondition)(nil), "nc.WhereNotificationCondition")
	golang_proto.RegisterType((*WhereNotificationCondition)(nil), "nc.WhereNotificationCondition")
	proto.RegisterType((*WhereUserNotificationCondition)(nil), "nc.WhereUserNotificationCondition")
	golang_proto.RegisterType((*WhereUserNotificationCondition)(nil), "nc.WhereUserNotificationCondition")
}

func init() { proto.RegisterFile("pb/nc/nc_message.proto", fileDescriptor_1ded58a16719d600) }
func init() { golang_proto.RegisterFile("pb/nc/nc_message.proto", fileDescriptor_1ded58a16719d600) }

var fileDescriptor_1ded58a16719d600 = []byte{
	// 837 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x4f, 0x8f, 0xdb, 0x44,
	0x14, 0xdf, 0x71, 0xb2, 0xbb, 0xed, 0xcb, 0x52, 0x6d, 0x67, 0x93, 0xad, 0x15, 0x89, 0x38, 0x5a,
	0x2e, 0xb9, 0x60, 0x4b, 0x2e, 0xe2, 0x10, 0x71, 0x69, 0x12, 0x69, 0x15, 0x81, 0x50, 0x65, 0xb6,
	0x42, 0xe2, 0x12, 0xf9, 0xcf, 0xac, 0x33, 0xc5, 0xf1, 0x18, 0xcf, 0xa4, 0xd5, 0xde, 0x90, 0xf8,
	0x02, 0xbd, 0x20, 0x71, 0x03, 0x7a, 0xe0, 0x73, 0x70, 0xdc, 0x63, 0x3f, 0x41, 0x40, 0xe1, 0xc2,
	0xc7, 0x40, 0x9e, 0xd8, 0x89, 0x33, 0xf1, 0x56, 0xa1, 0xc0, 0x81, 0x9b, 0xdf, 0x9b, 0xf7, 0xff,
	0xf7, 0x7b, 0x9e, 0x81, 0xf3, 0xc4, 0xb3, 0x62, 0xdf, 0x8a, 0xfd, 0xc9, 0x8c, 0x70, 0xee, 0x86,
	0xc4, 0x4c, 0x52, 0x26, 0x18, 0xd6, 0x62, 0xbf, 0x3d, 0x0a, 0xa9, 0x88, 0x5c, 0xcf, 0xe4, 0x34,
	0xfa, 0x3a, 0x65, 0x01, 0x31, 0x7d, 0x36, 0x33, 0xc5, 0x4b, 0x2b, 0x64, 0x91, 0x1b, 0x87, 0x56,
	0xc8, 0x92, 0x29, 0x49, 0xad, 0xc4, 0xb3, 0x5e, 0xd8, 0x96, 0xcf, 0x66, 0x33, 0x16, 0x27, 0x9e,
	0x95, 0xb8, 0x21, 0x8d, 0x5d, 0x41, 0x59, 0xbc, 0x8a, 0xd4, 0x7e, 0xf2, 0x2e, 0x51, 0x38, 0x4b,
	0x05, 0x8d, 0xc3, 0x3c, 0xc4, 0x3b, 0x15, 0xe2, 0xb9, 0x9c, 0x4c, 0x5e, 0x4e, 0x49, 0x9a, 0xb7,
	0xd4, 0xfe, 0x30, 0xa4, 0x62, 0x3a, 0xf7, 0x32, 0x67, 0x2b, 0x64, 0x21, 0xb3, 0xa4, 0xda, 0x9b,
	0x5f, 0x4b, 0x49, 0x0a, 0xf2, 0x2b, 0x37, 0x6f, 0x6e, 0x26, 0xc3, 0x02, 0x12, 0xe5, 0x5a, 0x23,
	0x64, 0x2c, 0x8c, 0xc8, 0xc6, 0x57, 0xd0, 0x19, 0xe1, 0xc2, 0x9d, 0x25, 0x2b, 0x83, 0x8b, 0x3f,
	0x11, 0xb4, 0x86, 0x29, 0x71, 0x05, 0xf9, 0x9c, 0x09, 0x7a, 0x4d, 0x7d, 0x39, 0x0b, 0x87, 0x7c,
	0x83, 0x9b, 0x70, 0x28, 0xa8, 0x88, 0x88, 0x8e, 0xba, 0xa8, 0x77, 0xdf, 0x59, 0x09, 0x58, 0x87,
	0x63, 0x9f, 0xc5, 0x82, 0xc4, 0x42, 0xd7, 0xa4, 0xbe, 0x10, 0x71, 0x0f, 0xea, 0xe2, 0x26, 0x21,
	0x7a, 0xad, 0x8b, 0x7a, 0x0f, 0xec, 0xa6, 0x19, 0xfb, 0x66, 0x39, 0xe4, 0xd5, 0x4d, 0x42, 0x1c,
	0x69, 0x81, 0x2f, 0xe1, 0x24, 0x99, 0x7b, 0x11, 0xe5, 0x53, 0x12, 0x4c, 0x5c, 0xa1, 0xd7, 0xbb,
	0xa8, 0xd7, 0xb0, 0xdb, 0xe6, 0xaa, 0x56, 0xb3, 0xa8, 0xd5, 0xbc, 0x2a, 0x6a, 0x1d, 0xdc, 0xbb,
	0x5d, 0x18, 0xe8, 0xd5, 0x6f, 0x06, 0x72, 0x1a, 0x6b, 0xcf, 0x27, 0x02, 0x77, 0xe0, 0x70, 0xce,
	0x49, 0xca, 0xf5, 0xc3, 0x6e, 0xad, 0xd7, 0xb0, 0xef, 0x65, 0x39, 0x9f, 0x71, 0x92, 0x3a, 0x2b,
	0x75, 0xff, 0xe4, 0xcd, 0xcf, 0xc6, 0xc1, 0xab, 0xd7, 0xc6, 0xc1, 0x0f, 0xaf, 0x8d, 0x83, 0x8b,
	0x6f, 0x11, 0x9c, 0x57, 0xb5, 0xca, 0x13, 0xfc, 0x11, 0x9c, 0xc4, 0x25, 0x9d, 0x6c, 0xb9, 0x61,
	0x9f, 0xaa, 0x3d, 0x38, 0x5b, 0x56, 0xf8, 0x62, 0xdd, 0xc7, 0x15, 0x13, 0x6e, 0x24, 0x07, 0x52,
	0x73, 0xb6, 0x74, 0x4a, 0x09, 0x3f, 0x6a, 0x70, 0xfa, 0x74, 0xce, 0xa7, 0xe5, 0xa0, 0xb8, 0x0f,
	0x0f, 0xca, 0xf2, 0x78, 0x24, 0xd3, 0xd7, 0x06, 0x78, 0xb9, 0x30, 0x94, 0x13, 0x47, 0x91, 0x37,
	0x20, 0x69, 0x77, 0x80, 0x54, 0xab, 0x06, 0xa9, 0xfe, 0xb7, 0x41, 0x3a, 0xfc, 0xc7, 0x20, 0x1d,
	0xed, 0x03, 0xd2, 0x14, 0xce, 0x3e, 0xa3, 0x5c, 0xa8, 0x64, 0x1c, 0x02, 0xc8, 0xdd, 0x98, 0xf8,
	0x2c, 0x0e, 0x72, 0x78, 0x3a, 0x59, 0xa4, 0x2f, 0x33, 0x6d, 0xd9, 0x7a, 0xc8, 0xe2, 0x80, 0x66,
	0x1f, 0x83, 0xfa, 0xed, 0xc2, 0x38, 0x70, 0xee, 0x4b, 0xbf, 0x4c, 0xab, 0x64, 0x4a, 0xa1, 0xb9,
	0x9b, 0x89, 0x27, 0xf8, 0x63, 0x78, 0xaf, 0x8c, 0x32, 0xd7, 0x91, 0xac, 0x7b, 0x97, 0x0c, 0xdb,
	0x66, 0x12, 0x8a, 0x12, 0x0d, 0x56, 0x82, 0x92, 0xf3, 0x27, 0x04, 0xad, 0x67, 0x49, 0x50, 0xb1,
	0x6d, 0xff, 0x46, 0x83, 0x3b, 0x34, 0xd6, 0xf6, 0xa1, 0xb1, 0x52, 0xe2, 0x73, 0x68, 0x8d, 0x48,
	0x44, 0xfe, 0x9b, 0x0a, 0xd5, 0x75, 0x40, 0xf0, 0xbe, 0x43, 0x7c, 0x96, 0x06, 0x0e, 0x71, 0x83,
	0x8c, 0x14, 0x6a, 0xd2, 0x0f, 0xe0, 0x38, 0x63, 0xc9, 0x84, 0x06, 0xf9, 0x52, 0xc0, 0x72, 0x61,
	0x1c, 0x65, 0x96, 0xe3, 0x91, 0x73, 0x94, 0x1d, 0x8d, 0x03, 0xfc, 0x29, 0xb4, 0xa4, 0x51, 0xb9,
	0xab, 0x09, 0x0d, 0xb8, 0xae, 0x75, 0x6b, 0xbd, 0xda, 0xe0, 0xd1, 0x72, 0x61, 0x9c, 0xa9, 0xc1,
	0xc7, 0x23, 0xee, 0x9c, 0xcd, 0x55, 0x65, 0xa0, 0xd2, 0x31, 0x81, 0x47, 0x19, 0x49, 0xaa, 0x4a,
	0xbb, 0xac, 0x98, 0xc7, 0xc5, 0x7a, 0x1e, 0xaa, 0xc7, 0xde, 0x33, 0xf9, 0x0e, 0x81, 0x5e, 0x9d,
	0x92, 0x27, 0x78, 0x08, 0x78, 0xa7, 0xd3, 0x82, 0xa0, 0xcd, 0x62, 0xb1, 0xb6, 0xbc, 0x1e, 0xaa,
	0x3d, 0xee, 0x47, 0xd4, 0xef, 0x35, 0x68, 0xdf, 0x8d, 0x2b, 0xfe, 0x04, 0x60, 0x73, 0x71, 0xe6,
	0xbd, 0x9f, 0x9b, 0xc5, 0x5d, 0xf6, 0xc2, 0x36, 0x9f, 0xae, 0x4f, 0xf3, 0x7e, 0x4b, 0xf6, 0xb8,
	0x0f, 0xb0, 0xb9, 0xed, 0x72, 0x92, 0xb6, 0xca, 0xde, 0x03, 0x97, 0x13, 0x99, 0xbd, 0x18, 0x96,
	0x57, 0x28, 0xf0, 0x63, 0x38, 0xce, 0x2f, 0x5b, 0xf9, 0x6b, 0x6b, 0xd8, 0x67, 0x65, 0xc7, 0x2f,
	0x56, 0x47, 0xb9, 0x5b, 0x61, 0x89, 0xfb, 0xca, 0x5e, 0xd4, 0xab, 0xf7, 0x22, 0x77, 0x7b, 0xdb,
	0x76, 0xfc, 0xa2, 0x41, 0xe7, 0xed, 0xf8, 0xfe, 0xdf, 0x66, 0x73, 0x09, 0x0f, 0x77, 0x28, 0x95,
	0x0f, 0xa8, 0x92, 0x51, 0xb9, 0xff, 0xa9, 0xca, 0xab, 0xed, 0x41, 0x0d, 0x46, 0xb7, 0xcb, 0x0e,
	0x7a, 0xb3, 0xec, 0xa0, 0xdf, 0x97, 0x1d, 0xf4, 0xeb, 0x1f, 0x1d, 0xf4, 0x95, 0x7d, 0xc7, 0xab,
	0x48, 0x10, 0x77, 0x36, 0xc9, 0x9f, 0x46, 0xcf, 0x6f, 0xb8, 0x45, 0xe3, 0xeb, 0xd4, 0xb5, 0xe4,
	0x6b, 0xc6, 0x3b, 0x92, 0xd7, 0xcc, 0xe3, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x8a, 0xe9, 0xba,
	0x18, 0xf7, 0x09, 0x00, 0x00,
}

func (m *CreateNotificationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateNotificationReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateNotificationReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNcMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.PublishedAt != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.PublishedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.PublishedAt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintNcMessage(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintNcMessage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintNcMessage(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintNcMessage(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateNotificationResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateNotificationResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateNotificationResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PublishTotal != 0 {
		i = encodeVarintNcMessage(dAtA, i, uint64(m.PublishTotal))
		i--
		dAtA[i] = 0x10
	}
	if m.Notification != nil {
		{
			size, err := m.Notification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNcMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushNotification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushNotification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushNotification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNcMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.PublishedAt != nil {
		n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.PublishedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.PublishedAt):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintNcMessage(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x2a
	}
	if m.Type != 0 {
		i = encodeVarintNcMessage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintNcMessage(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintNcMessage(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.NotificationID != 0 {
		i = encodeVarintNcMessage(dAtA, i, uint64(m.NotificationID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListNotificationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListNotificationReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListNotificationReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.WhereCond.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNcMessage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ListNotificationResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListNotificationResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListNotificationResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintNcMessage(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Notifications) > 0 {
		for iNdEx := len(m.Notifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Notifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNcMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateNotificationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNotificationReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateNotificationReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Notification != nil {
		{
			size, err := m.Notification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNcMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.WhereCond.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNcMessage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DeleteNotificationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteNotificationReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteNotificationReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.WhereCond.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNcMessage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RecordReadUserNotificationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordReadUserNotificationReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordReadUserNotificationReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserNotificationIDs) > 0 {
		dAtA9 := make([]byte, len(m.UserNotificationIDs)*10)
		var j8 int
		for _, num1 := range m.UserNotificationIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintNcMessage(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x12
	}
	if m.UserID != 0 {
		i = encodeVarintNcMessage(dAtA, i, uint64(m.UserID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListUserNotificationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListUserNotificationReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListUserNotificationReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.WhereCond.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNcMessage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ListUserNotificationResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListUserNotificationResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListUserNotificationResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintNcMessage(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserNotifications) > 0 {
		for iNdEx := len(m.UserNotifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserNotifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNcMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WhereNotificationCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereNotificationCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereNotificationCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Notification.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNcMessage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Sorting.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNcMessage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.BaseWhere.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNcMessage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNcMessage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *WhereUserNotificationCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhereUserNotificationCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhereUserNotificationCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UserNotification.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNcMessage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Sorting.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNcMessage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.BaseWhere.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNcMessage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNcMessage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintNcMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovNcMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateNotificationReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovNcMessage(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovNcMessage(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovNcMessage(uint64(m.Type))
	}
	if m.PublishedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.PublishedAt)
		n += 1 + l + sovNcMessage(uint64(l))
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovNcMessage(uint64(l))
		}
	}
	return n
}

func (m *CreateNotificationResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Notification != nil {
		l = m.Notification.Size()
		n += 1 + l + sovNcMessage(uint64(l))
	}
	if m.PublishTotal != 0 {
		n += 1 + sovNcMessage(uint64(m.PublishTotal))
	}
	return n
}

func (m *PushNotification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotificationID != 0 {
		n += 1 + sovNcMessage(uint64(m.NotificationID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovNcMessage(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovNcMessage(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovNcMessage(uint64(m.Type))
	}
	if m.PublishedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.PublishedAt)
		n += 1 + l + sovNcMessage(uint64(l))
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovNcMessage(uint64(l))
		}
	}
	return n
}

func (m *ListNotificationReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.WhereCond.Size()
	n += 1 + l + sovNcMessage(uint64(l))
	return n
}

func (m *ListNotificationResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Notifications) > 0 {
		for _, e := range m.Notifications {
			l = e.Size()
			n += 1 + l + sovNcMessage(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovNcMessage(uint64(m.Total))
	}
	return n
}

func (m *UpdateNotificationReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.WhereCond.Size()
	n += 1 + l + sovNcMessage(uint64(l))
	if m.Notification != nil {
		l = m.Notification.Size()
		n += 1 + l + sovNcMessage(uint64(l))
	}
	return n
}

func (m *DeleteNotificationReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.WhereCond.Size()
	n += 1 + l + sovNcMessage(uint64(l))
	return n
}

func (m *RecordReadUserNotificationReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserID != 0 {
		n += 1 + sovNcMessage(uint64(m.UserID))
	}
	if len(m.UserNotificationIDs) > 0 {
		l = 0
		for _, e := range m.UserNotificationIDs {
			l += sovNcMessage(uint64(e))
		}
		n += 1 + sovNcMessage(uint64(l)) + l
	}
	return n
}

func (m *ListUserNotificationReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.WhereCond.Size()
	n += 1 + l + sovNcMessage(uint64(l))
	return n
}

func (m *ListUserNotificationResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserNotifications) > 0 {
		for _, e := range m.UserNotifications {
			l = e.Size()
			n += 1 + l + sovNcMessage(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovNcMessage(uint64(m.Total))
	}
	return n
}

func (m *WhereNotificationCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pagination.Size()
	n += 1 + l + sovNcMessage(uint64(l))
	l = m.BaseWhere.Size()
	n += 1 + l + sovNcMessage(uint64(l))
	l = m.Sorting.Size()
	n += 1 + l + sovNcMessage(uint64(l))
	l = m.Notification.Size()
	n += 1 + l + sovNcMessage(uint64(l))
	return n
}

func (m *WhereUserNotificationCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pagination.Size()
	n += 1 + l + sovNcMessage(uint64(l))
	l = m.BaseWhere.Size()
	n += 1 + l + sovNcMessage(uint64(l))
	l = m.Sorting.Size()
	n += 1 + l + sovNcMessage(uint64(l))
	l = m.UserNotification.Size()
	n += 1 + l + sovNcMessage(uint64(l))
	return n
}

func sovNcMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNcMessage(x uint64) (n int) {
	return sovNcMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateNotificationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateNotificationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateNotificationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNcMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNcMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNcMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNcMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= NotificationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNcMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublishedAt == nil {
				m.PublishedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.PublishedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNcMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNcMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateNotificationResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateNotificationResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateNotificationResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNcMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Notification == nil {
				m.Notification = &Notification{}
			}
			if err := m.Notification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishTotal", wireType)
			}
			m.PublishTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublishTotal |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNcMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNcMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushNotification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushNotification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushNotification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationID", wireType)
			}
			m.NotificationID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotificationID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNcMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNcMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNcMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNcMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= NotificationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNcMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublishedAt == nil {
				m.PublishedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.PublishedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNcMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNcMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListNotificationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListNotificationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListNotificationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhereCond", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNcMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WhereCond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNcMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListNotificationResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListNotificationResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListNotificationResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNcMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notifications = append(m.Notifications, &Notification{})
			if err := m.Notifications[len(m.Notifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNcMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNcMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNotificationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNotificationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNotificationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhereCond", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNcMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WhereCond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNcMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Notification == nil {
				m.Notification = &Notification{}
			}
			if err := m.Notification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNcMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteNotificationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteNotificationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteNotificationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhereCond", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNcMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WhereCond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNcMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordReadUserNotificationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordReadUserNotificationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordReadUserNotificationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNcMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserNotificationIDs = append(m.UserNotificationIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNcMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNcMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNcMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserNotificationIDs) == 0 {
					m.UserNotificationIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNcMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserNotificationIDs = append(m.UserNotificationIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserNotificationIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNcMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNcMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUserNotificationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListUserNotificationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListUserNotificationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhereCond", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNcMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WhereCond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNcMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUserNotificationResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListUserNotificationResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListUserNotificationResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserNotifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNcMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserNotifications = append(m.UserNotifications, &UserNotification{})
			if err := m.UserNotifications[len(m.UserNotifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNcMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNcMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereNotificationCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereNotificationCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereNotificationCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNcMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseWhere", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNcMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseWhere.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sorting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNcMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sorting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNcMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Notification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNcMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhereUserNotificationCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhereUserNotificationCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhereUserNotificationCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNcMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseWhere", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNcMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseWhere.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sorting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNcMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sorting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserNotification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNcMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserNotification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNcMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNcMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNcMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNcMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNcMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNcMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNcMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNcMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNcMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNcMessage = fmt.Errorf("proto: unexpected end of group")
)
