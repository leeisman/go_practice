// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/nc/nc_svc.proto

package nc

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("pb/nc/nc_svc.proto", fileDescriptor_84112ac0e7da91da) }
func init() { golang_proto.RegisterFile("pb/nc/nc_svc.proto", fileDescriptor_84112ac0e7da91da) }

var fileDescriptor_84112ac0e7da91da = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0xc9, 0xc7, 0x87, 0xe0, 0xac, 0x64, 0x90, 0xaa, 0xa9, 0x06, 0x04, 0xb7, 0xce, 0x40,
	0x7d, 0x82, 0xda, 0x16, 0x17, 0x86, 0x82, 0x95, 0x22, 0x08, 0x52, 0x26, 0x93, 0xdb, 0x71, 0x34,
	0xc9, 0xc4, 0x99, 0x69, 0xa5, 0xef, 0xe6, 0xc2, 0xa5, 0x4b, 0x1f, 0x41, 0xea, 0x8b, 0xc8, 0xa4,
	0x56, 0xa9, 0xf9, 0xb3, 0xcb, 0x9c, 0x73, 0xef, 0x2f, 0x87, 0xc3, 0x45, 0x38, 0x8f, 0x68, 0xc6,
	0x69, 0xc6, 0x27, 0x66, 0xce, 0x49, 0xae, 0x95, 0x55, 0xf8, 0x5f, 0xc6, 0xfd, 0x53, 0x21, 0xed,
	0xfd, 0x2c, 0x22, 0x5c, 0xa5, 0x54, 0x28, 0xa1, 0x68, 0x61, 0x45, 0xb3, 0x69, 0xf1, 0x2a, 0x1e,
	0xc5, 0xd7, 0x6a, 0xc5, 0x6f, 0x0b, 0xa5, 0x44, 0x02, 0xbf, 0x53, 0x90, 0xe6, 0x76, 0xf1, 0x6d,
	0xb6, 0x7e, 0xfe, 0x91, 0x82, 0x31, 0x4c, 0xc0, 0x4a, 0xef, 0xbc, 0xfc, 0x47, 0xdb, 0xc3, 0xde,
	0x35, 0xe8, 0xb9, 0xe4, 0x80, 0x2f, 0x11, 0xee, 0x69, 0x60, 0x16, 0x86, 0xca, 0xca, 0xa9, 0xe4,
	0xcc, 0x4a, 0x95, 0xe1, 0x03, 0x92, 0x71, 0x52, 0xd6, 0x47, 0xf0, 0xe4, 0xfb, 0x75, 0x96, 0xc9,
	0xf1, 0x00, 0xed, 0x84, 0xd2, 0xd8, 0x0d, 0xd4, 0x9e, 0x9b, 0xff, 0xab, 0x3a, 0xd0, 0x7e, 0xb5,
	0x61, 0x72, 0x7c, 0x81, 0xf0, 0x38, 0x8f, 0x2b, 0x33, 0x95, 0x75, 0x87, 0x6a, 0x91, 0x55, 0x11,
	0x64, 0x5d, 0x04, 0x19, 0xb8, 0x22, 0x1c, 0xa8, 0x0f, 0x09, 0x54, 0x81, 0xca, 0x7a, 0x13, 0xe8,
	0x06, 0xf9, 0x23, 0xe0, 0x4a, 0xc7, 0x23, 0x60, 0xf1, 0xd8, 0x80, 0xde, 0x00, 0x1e, 0x3b, 0x60,
	0xbd, 0xdf, 0x04, 0xbe, 0x43, 0x47, 0xf5, 0x8b, 0xdd, 0x30, 0xc4, 0x27, 0xcd, 0xec, 0x6e, 0x18,
	0x36, 0xe1, 0xaf, 0xd0, 0xae, 0x6b, 0xb8, 0x94, 0xb8, 0xbd, 0xee, 0xbe, 0x2a, 0xeb, 0x61, 0xbd,
	0x69, 0xf2, 0xf3, 0xfe, 0xdb, 0x32, 0xf0, 0xde, 0x97, 0x81, 0xf7, 0xb1, 0x0c, 0xbc, 0xd7, 0xcf,
	0xc0, 0xbb, 0xed, 0x08, 0x69, 0x13, 0x16, 0x11, 0x23, 0x93, 0x47, 0xad, 0x62, 0x70, 0xd7, 0x4b,
	0xec, 0x33, 0xb5, 0xc0, 0xd2, 0x89, 0x50, 0x09, 0xcb, 0x04, 0x7d, 0x58, 0x18, 0x2a, 0xb3, 0xa9,
	0x66, 0xb4, 0xb8, 0xca, 0x68, 0xab, 0x08, 0x7a, 0xf6, 0x15, 0x00, 0x00, 0xff, 0xff, 0x81, 0x21,
	0x1f, 0xee, 0x09, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NCServiceClient is the client API for NCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NCServiceClient interface {
	CreateNotification(ctx context.Context, in *CreateNotificationReq, opts ...grpc.CallOption) (*CreateNotificationResp, error)
	ListNotification(ctx context.Context, in *ListNotificationReq, opts ...grpc.CallOption) (*ListNotificationResp, error)
	UpdateNotification(ctx context.Context, in *UpdateNotificationReq, opts ...grpc.CallOption) (*types.Empty, error)
	DeleteNotification(ctx context.Context, in *DeleteNotificationReq, opts ...grpc.CallOption) (*types.Empty, error)
	RecordReadUserNotification(ctx context.Context, in *RecordReadUserNotificationReq, opts ...grpc.CallOption) (*types.Empty, error)
	RecordReadUserNotificationALL(ctx context.Context, in *RecordReadUserNotificationALLReq, opts ...grpc.CallOption) (*types.Empty, error)
	ListUserNotification(ctx context.Context, in *ListUserNotificationReq, opts ...grpc.CallOption) (*ListUserNotificationResp, error)
}

type nCServiceClient struct {
	cc *grpc.ClientConn
}

func NewNCServiceClient(cc *grpc.ClientConn) NCServiceClient {
	return &nCServiceClient{cc}
}

func (c *nCServiceClient) CreateNotification(ctx context.Context, in *CreateNotificationReq, opts ...grpc.CallOption) (*CreateNotificationResp, error) {
	out := new(CreateNotificationResp)
	err := c.cc.Invoke(ctx, "/nc.NCService/CreateNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nCServiceClient) ListNotification(ctx context.Context, in *ListNotificationReq, opts ...grpc.CallOption) (*ListNotificationResp, error) {
	out := new(ListNotificationResp)
	err := c.cc.Invoke(ctx, "/nc.NCService/ListNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nCServiceClient) UpdateNotification(ctx context.Context, in *UpdateNotificationReq, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/nc.NCService/UpdateNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nCServiceClient) DeleteNotification(ctx context.Context, in *DeleteNotificationReq, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/nc.NCService/DeleteNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nCServiceClient) RecordReadUserNotification(ctx context.Context, in *RecordReadUserNotificationReq, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/nc.NCService/RecordReadUserNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nCServiceClient) RecordReadUserNotificationALL(ctx context.Context, in *RecordReadUserNotificationALLReq, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/nc.NCService/RecordReadUserNotificationALL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nCServiceClient) ListUserNotification(ctx context.Context, in *ListUserNotificationReq, opts ...grpc.CallOption) (*ListUserNotificationResp, error) {
	out := new(ListUserNotificationResp)
	err := c.cc.Invoke(ctx, "/nc.NCService/ListUserNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NCServiceServer is the server API for NCService service.
type NCServiceServer interface {
	CreateNotification(context.Context, *CreateNotificationReq) (*CreateNotificationResp, error)
	ListNotification(context.Context, *ListNotificationReq) (*ListNotificationResp, error)
	UpdateNotification(context.Context, *UpdateNotificationReq) (*types.Empty, error)
	DeleteNotification(context.Context, *DeleteNotificationReq) (*types.Empty, error)
	RecordReadUserNotification(context.Context, *RecordReadUserNotificationReq) (*types.Empty, error)
	RecordReadUserNotificationALL(context.Context, *RecordReadUserNotificationALLReq) (*types.Empty, error)
	ListUserNotification(context.Context, *ListUserNotificationReq) (*ListUserNotificationResp, error)
}

// UnimplementedNCServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNCServiceServer struct {
}

func (*UnimplementedNCServiceServer) CreateNotification(ctx context.Context, req *CreateNotificationReq) (*CreateNotificationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotification not implemented")
}
func (*UnimplementedNCServiceServer) ListNotification(ctx context.Context, req *ListNotificationReq) (*ListNotificationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotification not implemented")
}
func (*UnimplementedNCServiceServer) UpdateNotification(ctx context.Context, req *UpdateNotificationReq) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotification not implemented")
}
func (*UnimplementedNCServiceServer) DeleteNotification(ctx context.Context, req *DeleteNotificationReq) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotification not implemented")
}
func (*UnimplementedNCServiceServer) RecordReadUserNotification(ctx context.Context, req *RecordReadUserNotificationReq) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordReadUserNotification not implemented")
}
func (*UnimplementedNCServiceServer) RecordReadUserNotificationALL(ctx context.Context, req *RecordReadUserNotificationALLReq) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordReadUserNotificationALL not implemented")
}
func (*UnimplementedNCServiceServer) ListUserNotification(ctx context.Context, req *ListUserNotificationReq) (*ListUserNotificationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserNotification not implemented")
}

func RegisterNCServiceServer(s *grpc.Server, srv NCServiceServer) {
	s.RegisterService(&_NCService_serviceDesc, srv)
}

func _NCService_CreateNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NCServiceServer).CreateNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nc.NCService/CreateNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NCServiceServer).CreateNotification(ctx, req.(*CreateNotificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NCService_ListNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NCServiceServer).ListNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nc.NCService/ListNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NCServiceServer).ListNotification(ctx, req.(*ListNotificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NCService_UpdateNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NCServiceServer).UpdateNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nc.NCService/UpdateNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NCServiceServer).UpdateNotification(ctx, req.(*UpdateNotificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NCService_DeleteNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NCServiceServer).DeleteNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nc.NCService/DeleteNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NCServiceServer).DeleteNotification(ctx, req.(*DeleteNotificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NCService_RecordReadUserNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordReadUserNotificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NCServiceServer).RecordReadUserNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nc.NCService/RecordReadUserNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NCServiceServer).RecordReadUserNotification(ctx, req.(*RecordReadUserNotificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NCService_RecordReadUserNotificationALL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordReadUserNotificationALLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NCServiceServer).RecordReadUserNotificationALL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nc.NCService/RecordReadUserNotificationALL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NCServiceServer).RecordReadUserNotificationALL(ctx, req.(*RecordReadUserNotificationALLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NCService_ListUserNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserNotificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NCServiceServer).ListUserNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nc.NCService/ListUserNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NCServiceServer).ListUserNotification(ctx, req.(*ListUserNotificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _NCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nc.NCService",
	HandlerType: (*NCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNotification",
			Handler:    _NCService_CreateNotification_Handler,
		},
		{
			MethodName: "ListNotification",
			Handler:    _NCService_ListNotification_Handler,
		},
		{
			MethodName: "UpdateNotification",
			Handler:    _NCService_UpdateNotification_Handler,
		},
		{
			MethodName: "DeleteNotification",
			Handler:    _NCService_DeleteNotification_Handler,
		},
		{
			MethodName: "RecordReadUserNotification",
			Handler:    _NCService_RecordReadUserNotification_Handler,
		},
		{
			MethodName: "RecordReadUserNotificationALL",
			Handler:    _NCService_RecordReadUserNotificationALL_Handler,
		},
		{
			MethodName: "ListUserNotification",
			Handler:    _NCService_ListUserNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/nc/nc_svc.proto",
}
