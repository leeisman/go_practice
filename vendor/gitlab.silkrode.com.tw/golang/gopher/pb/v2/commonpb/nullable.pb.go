// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/v2/commonpb/nullable.proto

package commonpb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NullString struct {
	Valid   bool   `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	String_ string `protobuf:"bytes,2,opt,name=String,proto3" json:"String,omitempty"`
}

func (m *NullString) Reset()         { *m = NullString{} }
func (m *NullString) String() string { return proto.CompactTextString(m) }
func (*NullString) ProtoMessage()    {}
func (*NullString) Descriptor() ([]byte, []int) {
	return fileDescriptor_01088847a945678a, []int{0}
}
func (m *NullString) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NullString) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NullString.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NullString) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NullString.Merge(m, src)
}
func (m *NullString) XXX_Size() int {
	return m.Size()
}
func (m *NullString) XXX_DiscardUnknown() {
	xxx_messageInfo_NullString.DiscardUnknown(m)
}

var xxx_messageInfo_NullString proto.InternalMessageInfo

func (m *NullString) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *NullString) GetString_() string {
	if m != nil {
		return m.String_
	}
	return ""
}

type NullInt64 struct {
	Valid bool  `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Int64 int64 `protobuf:"varint,2,opt,name=Int64,proto3" json:"Int64,omitempty"`
}

func (m *NullInt64) Reset()         { *m = NullInt64{} }
func (m *NullInt64) String() string { return proto.CompactTextString(m) }
func (*NullInt64) ProtoMessage()    {}
func (*NullInt64) Descriptor() ([]byte, []int) {
	return fileDescriptor_01088847a945678a, []int{1}
}
func (m *NullInt64) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NullInt64) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NullInt64.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NullInt64) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NullInt64.Merge(m, src)
}
func (m *NullInt64) XXX_Size() int {
	return m.Size()
}
func (m *NullInt64) XXX_DiscardUnknown() {
	xxx_messageInfo_NullInt64.DiscardUnknown(m)
}

var xxx_messageInfo_NullInt64 proto.InternalMessageInfo

func (m *NullInt64) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *NullInt64) GetInt64() int64 {
	if m != nil {
		return m.Int64
	}
	return 0
}

type NullInt32 struct {
	Valid bool  `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Int32 int32 `protobuf:"varint,2,opt,name=Int32,proto3" json:"Int32,omitempty"`
}

func (m *NullInt32) Reset()         { *m = NullInt32{} }
func (m *NullInt32) String() string { return proto.CompactTextString(m) }
func (*NullInt32) ProtoMessage()    {}
func (*NullInt32) Descriptor() ([]byte, []int) {
	return fileDescriptor_01088847a945678a, []int{2}
}
func (m *NullInt32) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NullInt32) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NullInt32.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NullInt32) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NullInt32.Merge(m, src)
}
func (m *NullInt32) XXX_Size() int {
	return m.Size()
}
func (m *NullInt32) XXX_DiscardUnknown() {
	xxx_messageInfo_NullInt32.DiscardUnknown(m)
}

var xxx_messageInfo_NullInt32 proto.InternalMessageInfo

func (m *NullInt32) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *NullInt32) GetInt32() int32 {
	if m != nil {
		return m.Int32
	}
	return 0
}

// [(gogoproto.customname) = "ID"];
type NullDouble struct {
	Valid   bool    `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Float64 float64 `protobuf:"fixed64,2,opt,name=Float64,proto3" json:"Float64,omitempty"`
}

func (m *NullDouble) Reset()         { *m = NullDouble{} }
func (m *NullDouble) String() string { return proto.CompactTextString(m) }
func (*NullDouble) ProtoMessage()    {}
func (*NullDouble) Descriptor() ([]byte, []int) {
	return fileDescriptor_01088847a945678a, []int{3}
}
func (m *NullDouble) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NullDouble) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NullDouble.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NullDouble) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NullDouble.Merge(m, src)
}
func (m *NullDouble) XXX_Size() int {
	return m.Size()
}
func (m *NullDouble) XXX_DiscardUnknown() {
	xxx_messageInfo_NullDouble.DiscardUnknown(m)
}

var xxx_messageInfo_NullDouble proto.InternalMessageInfo

func (m *NullDouble) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *NullDouble) GetFloat64() float64 {
	if m != nil {
		return m.Float64
	}
	return 0
}

type NullFloat struct {
	Valid   bool    `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Float32 float32 `protobuf:"fixed32,2,opt,name=Float32,proto3" json:"Float32,omitempty"`
}

func (m *NullFloat) Reset()         { *m = NullFloat{} }
func (m *NullFloat) String() string { return proto.CompactTextString(m) }
func (*NullFloat) ProtoMessage()    {}
func (*NullFloat) Descriptor() ([]byte, []int) {
	return fileDescriptor_01088847a945678a, []int{4}
}
func (m *NullFloat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NullFloat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NullFloat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NullFloat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NullFloat.Merge(m, src)
}
func (m *NullFloat) XXX_Size() int {
	return m.Size()
}
func (m *NullFloat) XXX_DiscardUnknown() {
	xxx_messageInfo_NullFloat.DiscardUnknown(m)
}

var xxx_messageInfo_NullFloat proto.InternalMessageInfo

func (m *NullFloat) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *NullFloat) GetFloat32() float32 {
	if m != nil {
		return m.Float32
	}
	return 0
}

type NullTime struct {
	Valid bool      `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Time  time.Time `protobuf:"bytes,2,opt,name=time,proto3,stdtime" json:"time"`
}

func (m *NullTime) Reset()         { *m = NullTime{} }
func (m *NullTime) String() string { return proto.CompactTextString(m) }
func (*NullTime) ProtoMessage()    {}
func (*NullTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_01088847a945678a, []int{5}
}
func (m *NullTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NullTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NullTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NullTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NullTime.Merge(m, src)
}
func (m *NullTime) XXX_Size() int {
	return m.Size()
}
func (m *NullTime) XXX_DiscardUnknown() {
	xxx_messageInfo_NullTime.DiscardUnknown(m)
}

var xxx_messageInfo_NullTime proto.InternalMessageInfo

func (m *NullTime) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *NullTime) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*NullString)(nil), "commonpbv2.NullString")
	golang_proto.RegisterType((*NullString)(nil), "commonpbv2.NullString")
	proto.RegisterType((*NullInt64)(nil), "commonpbv2.NullInt64")
	golang_proto.RegisterType((*NullInt64)(nil), "commonpbv2.NullInt64")
	proto.RegisterType((*NullInt32)(nil), "commonpbv2.NullInt32")
	golang_proto.RegisterType((*NullInt32)(nil), "commonpbv2.NullInt32")
	proto.RegisterType((*NullDouble)(nil), "commonpbv2.NullDouble")
	golang_proto.RegisterType((*NullDouble)(nil), "commonpbv2.NullDouble")
	proto.RegisterType((*NullFloat)(nil), "commonpbv2.NullFloat")
	golang_proto.RegisterType((*NullFloat)(nil), "commonpbv2.NullFloat")
	proto.RegisterType((*NullTime)(nil), "commonpbv2.NullTime")
	golang_proto.RegisterType((*NullTime)(nil), "commonpbv2.NullTime")
}

func init() { proto.RegisterFile("pb/v2/commonpb/nullable.proto", fileDescriptor_01088847a945678a) }
func init() {
	golang_proto.RegisterFile("pb/v2/commonpb/nullable.proto", fileDescriptor_01088847a945678a)
}

var fileDescriptor_01088847a945678a = []byte{
	// 360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xc1, 0x4e, 0xea, 0x40,
	0x14, 0x86, 0x3b, 0xdc, 0x0b, 0x17, 0xe6, 0xde, 0x15, 0x21, 0x37, 0x84, 0xc4, 0x96, 0xb0, 0x62,
	0x63, 0x27, 0x69, 0x8d, 0x31, 0x2e, 0x89, 0x18, 0x71, 0xe1, 0x62, 0x64, 0xe5, 0xae, 0x03, 0x75,
	0x98, 0x38, 0xed, 0x69, 0xca, 0x14, 0x5f, 0x83, 0xa5, 0x5b, 0x79, 0x12, 0x97, 0x2c, 0x79, 0x02,
	0x35, 0xf8, 0x22, 0xa6, 0x33, 0x34, 0x06, 0x92, 0xea, 0xae, 0x5f, 0xce, 0x99, 0x6f, 0xfe, 0xe6,
	0x1f, 0x7c, 0x94, 0x30, 0xb2, 0xf0, 0xc8, 0x04, 0xa2, 0x08, 0xe2, 0x84, 0x91, 0x38, 0x93, 0x32,
	0x60, 0x32, 0x74, 0x93, 0x14, 0x14, 0x34, 0x71, 0x31, 0x58, 0x78, 0x9d, 0x63, 0x2e, 0xd4, 0x2c,
	0x63, 0xee, 0x04, 0x22, 0xc2, 0x81, 0x03, 0xd1, 0x2b, 0x2c, 0xbb, 0xd7, 0xa4, 0x41, 0x7f, 0x99,
	0xa3, 0x1d, 0x87, 0x03, 0x70, 0x19, 0x7e, 0x6d, 0x29, 0x11, 0x85, 0x73, 0x15, 0x44, 0x89, 0x59,
	0xe8, 0x5d, 0x61, 0x7c, 0x93, 0x49, 0x79, 0xab, 0x52, 0x11, 0xf3, 0x66, 0x0b, 0x57, 0x17, 0x81,
	0x14, 0xd3, 0x36, 0xea, 0xa2, 0x7e, 0x9d, 0x1a, 0x68, 0xfe, 0xc7, 0x35, 0x33, 0x6f, 0x57, 0xba,
	0xa8, 0xdf, 0xa0, 0x3b, 0x3a, 0xff, 0xb7, 0x79, 0x76, 0xac, 0xe5, 0xca, 0xb1, 0x9e, 0x56, 0x8e,
	0xd5, 0x1b, 0xe2, 0x46, 0x6e, 0x1a, 0xc5, 0xea, 0xf4, 0xa4, 0x44, 0xd4, 0xc2, 0x55, 0x3d, 0xd6,
	0x9e, 0x5f, 0xd4, 0x40, 0xa9, 0xc6, 0xf7, 0xbe, 0xd5, 0xf8, 0x9e, 0xd6, 0x54, 0xa9, 0x81, 0x03,
	0xcd, 0xb5, 0xf9, 0xaf, 0x0b, 0xc8, 0x98, 0x0c, 0x4b, 0x3c, 0x6d, 0xfc, 0xe7, 0x52, 0x42, 0x50,
	0x04, 0x42, 0xb4, 0xc0, 0x03, 0xd7, 0xc8, 0x44, 0xd2, 0xc3, 0x1f, 0x54, 0xbb, 0x50, 0x15, 0x5a,
	0xe0, 0x81, 0x6a, 0x86, 0xeb, 0xb9, 0x6a, 0x2c, 0xa2, 0xb2, 0x50, 0x67, 0xf8, 0x77, 0xde, 0x91,
	0xd6, 0xfc, 0xf5, 0x3a, 0xae, 0x29, 0xd0, 0x2d, 0x0a, 0x74, 0xc7, 0x45, 0x81, 0x83, 0xfa, 0xfa,
	0xd5, 0xb1, 0x96, 0x6f, 0x0e, 0xa2, 0xfa, 0xc4, 0xfe, 0x4d, 0x83, 0xe1, 0x7a, 0x6b, 0xa3, 0xcd,
	0xd6, 0x46, 0xef, 0x5b, 0x1b, 0xbd, 0x7c, 0xd8, 0xe8, 0xce, 0xe7, 0x42, 0xc9, 0x80, 0xb9, 0x73,
	0x21, 0x1f, 0x52, 0x98, 0x86, 0xf9, 0x1b, 0x72, 0xd5, 0x23, 0xe1, 0x20, 0x83, 0x98, 0x13, 0x0e,
	0xc9, 0x2c, 0x4c, 0xc9, 0xfe, 0x53, 0x64, 0x35, 0x7d, 0xb1, 0xff, 0x19, 0x00, 0x00, 0xff, 0xff,
	0xb4, 0xed, 0xfb, 0x4c, 0xa3, 0x02, 0x00, 0x00,
}

func (m *NullString) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NullString) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NullString) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.String_) > 0 {
		i -= len(m.String_)
		copy(dAtA[i:], m.String_)
		i = encodeVarintNullable(dAtA, i, uint64(len(m.String_)))
		i--
		dAtA[i] = 0x12
	}
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NullInt64) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NullInt64) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NullInt64) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Int64 != 0 {
		i = encodeVarintNullable(dAtA, i, uint64(m.Int64))
		i--
		dAtA[i] = 0x10
	}
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NullInt32) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NullInt32) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NullInt32) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Int32 != 0 {
		i = encodeVarintNullable(dAtA, i, uint64(m.Int32))
		i--
		dAtA[i] = 0x10
	}
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NullDouble) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NullDouble) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NullDouble) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Float64 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Float64))))
		i--
		dAtA[i] = 0x11
	}
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NullFloat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NullFloat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NullFloat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Float32 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Float32))))
		i--
		dAtA[i] = 0x15
	}
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NullTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NullTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NullTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Time):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintNullable(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNullable(dAtA []byte, offset int, v uint64) int {
	offset -= sovNullable(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NullString) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	l = len(m.String_)
	if l > 0 {
		n += 1 + l + sovNullable(uint64(l))
	}
	return n
}

func (m *NullInt64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	if m.Int64 != 0 {
		n += 1 + sovNullable(uint64(m.Int64))
	}
	return n
}

func (m *NullInt32) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	if m.Int32 != 0 {
		n += 1 + sovNullable(uint64(m.Int32))
	}
	return n
}

func (m *NullDouble) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	if m.Float64 != 0 {
		n += 9
	}
	return n
}

func (m *NullFloat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	if m.Float32 != 0 {
		n += 5
	}
	return n
}

func (m *NullTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovNullable(uint64(l))
	return n
}

func sovNullable(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNullable(x uint64) (n int) {
	return sovNullable(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NullString) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNullable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NullString: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NullString: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNullable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNullable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNullable
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNullable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.String_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNullable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNullable
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNullable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NullInt64) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNullable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NullInt64: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NullInt64: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNullable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			m.Int64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNullable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int64 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNullable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNullable
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNullable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NullInt32) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNullable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NullInt32: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NullInt32: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNullable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32", wireType)
			}
			m.Int32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNullable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int32 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNullable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNullable
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNullable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NullDouble) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNullable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NullDouble: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NullDouble: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNullable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float64", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Float64 = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipNullable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNullable
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNullable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NullFloat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNullable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NullFloat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NullFloat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNullable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float32", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Float32 = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipNullable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNullable
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNullable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NullTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNullable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NullTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NullTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNullable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNullable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNullable
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNullable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNullable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNullable
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNullable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNullable(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNullable
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNullable
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNullable
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNullable
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNullable
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNullable
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNullable        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNullable          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNullable = fmt.Errorf("proto: unexpected end of group")
)
